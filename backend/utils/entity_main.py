# FILE: MAIN.PY
from entity_agent import EntityExtractionAgent
from models.data_models import SchemaItem
from typing import List, Dict, Any
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def process_document(document_text: str, schema: List[Dict]) -> Dict[str, Any]:
    """
    Processes a document using the EntityExtractionAgent to extract entities
    based on the provided schema.

    Args:
        document_text (str): The text content of the document to be processed.
        schema (List[Dict]): A list of dictionaries, where each dictionary
            represents a schema item defining the entities to be extracted.

    Returns:
        Dict[str, Any]: A dictionary containing the final report generated by
        the EntityExtractionAgent, which includes the extracted entities.
    """

    schema_items = [SchemaItem(**item) for item in schema]

    input_data = {
        "document_id": "doc_" + str(len(document_text)),  # we can also replace this with UUID
        "document_text": document_text,
        "schema_items": schema_items,
    }
    
    logger.info(f"Processing document with ID: {input_data['document_id']}")

    agent = EntityExtractionAgent()

    result = await agent.process(input_data)

    return result['extracted_entities']